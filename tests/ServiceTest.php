<?php
declare(strict_types=1);
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2018 LibreWorks contributors
 * @license   Apache-2.0
 */
namespace Caridea\Acl;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-07-30 at 20:30:07.
 */
class ServiceTest extends \PHPUnit\Framework\TestCase
{
    /**
     * @covers Caridea\Acl\Service::__construct
     * @covers Caridea\Acl\Service::assert
     * @covers Caridea\Acl\Service::get
     */
    public function testAssert()
    {
        $acl = $this->getMockForAbstractClass(Acl::class);
        $acl->expects($this->once())
            ->method('can')
            ->willReturn(true);
        $strategy = $this->getMockForAbstractClass(Strategy::class);
        $strategy->expects($this->once())
            ->method('load')
            ->willReturn($acl);

        $object = new Service($strategy);
        $target = new Target('foo', 'bar');
        $subjects = [Subject::role('admin')];

        $object->assert($subjects, 'update', $target);

        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Acl\Service::__construct
     * @covers Caridea\Acl\Service::assert
     * @covers Caridea\Acl\Service::get
     * @expectedException \Caridea\Acl\Exception\Forbidden
     * @expectedExceptionMessage Access denied to update the target
     */
    public function testAssertFalse()
    {
        $acl = $this->getMockForAbstractClass(Acl::class);
        $acl->expects($this->once())
            ->method('can')
            ->willReturn(false);
        $strategy = $this->getMockForAbstractClass(Strategy::class);
        $strategy->expects($this->once())
            ->method('load')
            ->willReturn($acl);

        $object = new Service($strategy);
        $target = new Target('foo', 'bar');
        $subjects = [Subject::role('admin')];

        $object->assert($subjects, 'update', $target);
    }

    /**
     * @covers Caridea\Acl\Service::__construct
     * @covers Caridea\Acl\Service::assert
     * @covers Caridea\Acl\Service::get
     * @expectedException \Caridea\Acl\Exception\Forbidden
     * @expectedExceptionMessage Access denied to update the target
     */
    public function testAssertException()
    {
        $acl = $this->getMockForAbstractClass(Acl::class);
        $acl->expects($this->once())
            ->method('can')
            ->willThrowException(new \RuntimeException("o_O"));
        $strategy = $this->getMockForAbstractClass(Strategy::class);
        $strategy->expects($this->once())
            ->method('load')
            ->willReturn($acl);

        $object = new Service($strategy);
        $target = new Target('foo', 'bar');
        $subjects = [Subject::role('admin')];

        $object->assert($subjects, 'update', $target);
    }

    /**
     * @covers Caridea\Acl\Service::__construct
     * @covers Caridea\Acl\Service::can
     * @covers Caridea\Acl\Service::get
     */
    public function testCanException()
    {
        $acl = $this->getMockForAbstractClass(Acl::class);
        $acl->expects($this->once())
            ->method('can')
            ->willThrowException(new \RuntimeException("o_O"));
        $strategy = $this->getMockForAbstractClass(Strategy::class);
        $strategy->expects($this->once())
            ->method('load')
            ->willReturn($acl);

        $object = new Service($strategy);
        $target = new Target('foo', 'bar');
        $subjects = [Subject::role('admin')];

        $this->assertFalse($object->can($subjects, 'update', $target));

        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Acl\Service::__construct
     * @covers Caridea\Acl\Service::can
     * @covers Caridea\Acl\Service::get
     */
    public function testCanTrue()
    {
        $acl = $this->getMockForAbstractClass(Acl::class);
        $acl->expects($this->once())
            ->method('can')
            ->willReturn(true);
        $strategy = $this->getMockForAbstractClass(Strategy::class);
        $strategy->expects($this->once())
            ->method('load')
            ->willReturn($acl);

        $object = new Service($strategy);
        $target = new Target('foo', 'bar');
        $subjects = [Subject::role('admin')];

        $this->assertTrue($object->can($subjects, 'update', $target));

        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Acl\Service::__construct
     * @covers Caridea\Acl\Service::get
     */
    public function testGet()
    {
        $acl = $this->getMockForAbstractClass(Acl::class);
        $strategy = $this->getMockForAbstractClass(Strategy::class);
        $strategy->expects($this->once())
            ->method('load')
            ->willReturn($acl);

        $object = new Service($strategy);
        $target = new Target('foo', 'bar');
        $subjects = [Subject::role('admin')];

        $this->assertSame($acl, $object->get($target, $subjects));

        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Acl\Service::__construct
     * @covers Caridea\Acl\Service::getAll
     */
    public function testGetAllSingle()
    {
        $acl = $this->getMockForAbstractClass(Acl::class);
        $strategy = $this->getMockForAbstractClass(Strategy::class);
        $strategy->expects($this->once())
            ->method('load')
            ->willReturn($acl);

        $object = new Service($strategy);
        $target = new Target('foo', 'bar');
        $targets = [$target];
        $subjects = [Subject::role('admin')];

        $acls = ['foo#bar' => $acl];

        $this->assertEquals($acls, $object->getAll($targets, $subjects));

        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Acl\Service::__construct
     * @covers Caridea\Acl\Service::getAll
     */
    public function testGetAllMulti()
    {
        $acl = $this->getMockForAbstractClass(Acl::class);
        $strategy = $this->getMockForAbstractClass(MultiStrategy::class);
        $strategy->expects($this->once())
            ->method('loadAll')
            ->willReturn(['foo#bar' => $acl]);

        $object = new Service($strategy);
        $target = new Target('foo', 'bar');
        $targets = [$target];
        $subjects = [Subject::role('admin')];

        $acls = ['foo#bar' => $acl];

        $this->assertEquals($acls, $object->getAll($targets, $subjects));

        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Acl\Service::__construct
     * @covers Caridea\Acl\Service::getAll
     * @expectedException \Caridea\Acl\Exception\Unloadable
     * @expectedExceptionMessage Unable to load ACL for foo#bar, foo#baz
     */
    public function testGetAllMissing()
    {
        $acl = $this->getMockForAbstractClass(Acl::class);
        $strategy = $this->getMockForAbstractClass(MultiStrategy::class);
        $strategy->expects($this->once())
            ->method('loadAll')
            ->willReturn([]);

        $object = new Service($strategy);
        $target1 = new Target('foo', 'bar');
        $target2 = new Target('foo', 'baz');
        $targets = [$target1, $target2];
        $subjects = [Subject::role('admin')];

        $object->getAll($targets, $subjects);
    }
}
