<?php
declare(strict_types=1);
/**
 * Caridea
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 * @copyright 2015-2016 LibreWorks contributors
 * @license   http://opensource.org/licenses/Apache-2.0 Apache 2.0 License
 */
namespace Caridea\Acl;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-07-30 at 19:51:34.
 */
class CacheStrategyTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @covers Caridea\Acl\CacheStrategy::__construct
     * @covers Caridea\Acl\CacheStrategy::load
     * @covers Caridea\Acl\CacheStrategy::buildKey
     */
    public function testLoad()
    {
        $service = $this->getMock(Service::class, [], [], '', false);
        $acl = $this->getMockForAbstractClass(Acl::class);
        $delegate = $this->getMockForAbstractClass(Strategy::class);
        $delegate->expects($this->once())
            ->method('load')
            ->willReturn($acl);

        $object = new CacheStrategy($delegate);
        $target = new Target('foo', 'bar');
        $subjects = [Subject::role('admin')];
        
        $this->assertSame($acl, $object->load($target, $subjects, $service));
        $this->assertSame($acl, $object->load($target, $subjects, $service));
        
        $this->verifyMockObjects();
    }

    /**
     * @covers Caridea\Acl\CacheStrategy::__construct
     * @covers Caridea\Acl\CacheStrategy::load
     * @covers Caridea\Acl\CacheStrategy::buildKey
     * @expectedException \InvalidArgumentException
     * @expectedExceptionMessage Only instances of Subject are permitted in the subjects argument
     */
    public function testLoadBad()
    {
        $delegate = $this->getMockForAbstractClass(Strategy::class);
        $service = $this->getMock(Service::class, [], [], '', false);
        
        $object = new CacheStrategy($delegate);
        $target = new Target('foo', 'bar');
        $subjects = ['not-a-subject'];
        
        $object->load($target, $subjects, $service);
    }
}
